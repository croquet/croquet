
user  nginx;
worker_processes  auto;

error_log  /dev/stderr notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    server {
        listen       80;
        listen  [::]:80;
        server_name  _;

        absolute_redirect off;

        location / {
            root   /var/croquet-in-a-box/web;
            index  index.html index.htm;
        }

        error_page  403 404 /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # allow uploads to /files
        #
        location /files {
            root /var/tmp/croquet-in-a-box;

            dav_methods PUT;
            dav_access group:rw all:r;
            create_full_put_path on;
            client_max_body_size 100M;

            ## enable directory listings
            #
            # autoindex on;
            # autoindex_exact_size off;
            # autoindex_localtime on;

            ## CORS (enable if using croquet-in-a-box as a file server not web server)
            #
            # if ($request_method = 'OPTIONS') {
            #     add_header 'Access-Control-Allow-Origin' '*';
            #     add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS';
            #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-Croquet-App,X-Croquet-Id,X-Croquet-Session,X-Croquet-Version,X-Croquet-Path';
            #     add_header 'Access-Control-Max-Age' 1728000;
            #     add_header 'Content-Type' 'text/plain; charset=utf-8';
            #     add_header 'Content-Length' 0;
            #     return 204;
            # }
            # if ($request_method = 'PUT') {
            #     add_header 'Access-Control-Allow-Origin' '*' always;
            #     add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS' always;
            #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-Croquet-App,X-Croquet-Id,X-Croquet-Session,X-Croquet-Version,X-Croquet-Path' always;
            #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            # }
            # if ($request_method = 'GET') {
            #     add_header 'Access-Control-Allow-Origin' '*' always;
            #     add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS' always;
            #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-Croquet-App,X-Croquet-Id,X-Croquet-Session,X-Croquet-Version,X-Croquet-Path' always;
            #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            # }
        }

        # proxy /reflector to reflector image
        # (Docker Compose will create a network and DNS entry for the reflector service)
        #
        location /reflector {
            proxy_pass   http://reflector:9090;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }
}
